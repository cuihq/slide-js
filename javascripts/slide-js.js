// Generated by CoffeeScript 1.6.3
(function() {
  var Button, Control, Fragment, FullScreenButton, NextFragmentButton, NextPageButton, Page, PageInfo, PreviousFragmentButton, PreviousPageButton, ProgressBar, Show, Slide, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Slide = (function() {
    function Slide(config) {
      this.config = config;
      this.node = document.getElementById(this.config.id);
      this.show = new Show(this);
      this.control = new Control(this);
      this.page_info = this.control.page_info;
      this.progress_bar = new ProgressBar(this);
    }

    Slide.prototype.update_status = function() {
      if (this.page_info) {
        this.page_info.update_status();
      }
      if (this.progress_bar) {
        return this.progress_bar.update_status();
      }
    };

    return Slide;

  })();

  Show = (function() {
    function Show(slide) {
      var child, fragment, page, _i, _len, _ref;
      this.slide = slide;
      this.index = -1;
      this.length = -1;
      this.children = [];
      this.node = document.createElement('div');
      this.node.className = 'slide';
      _ref = this.slide.node.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (!page) {
          page = new Page;
        }
        if (child.tagName === 'hr'.toUpperCase()) {
          this.add(page);
          page = new Page;
        } else {
          fragment = new Fragment(page);
          fragment.add(child.cloneNode(true));
          page.add(fragment);
        }
        child.style.display = 'none';
      }
      this.add(page);
      this.slide.node.appendChild(this.node);
      if (this.length !== 0) {
        this.set_index(0);
      }
    }

    Show.prototype.add = function(page) {
      if (page) {
        this.children.push(page);
        this.node.appendChild(page.node);
        this.slide.index = 0;
        return this.length = this.children.length;
      }
    };

    Show.prototype.set_index = function(value) {
      this.index = value;
      return this.slide.update_status();
    };

    Show.prototype.next_page = function() {
      var _ref;
      if ((0 <= (_ref = this.index) && _ref < this.length - 1)) {
        if (this.children[this.index].is_end()) {
          this.children[this.index].hide();
          this.set_index(this.index + 1);
          return this.children[this.index].show();
        } else {
          return this.children[this.index].show();
        }
      } else if (this.index === this.length - 1 && this.slide.config.cycle) {
        if (this.children[this.index].is_end()) {
          this.children[this.index].hide();
          this.set_index(0);
          return this.children[this.index].show();
        } else {
          return this.children[this.index].show();
        }
      }
    };

    Show.prototype.previous_page = function() {
      var _ref;
      if ((0 < (_ref = this.index) && _ref < this.length)) {
        this.children[this.index].hide();
        this.set_index(this.index - 1);
        return this.children[this.index].show();
      } else if (this.index === 0 && this.slide.config.cycle) {
        this.children[this.index].hide();
        this.set_index(this.length - 1);
        return this.children[this.index].show();
      }
    };

    Show.prototype.next_fragment = function() {
      var _ref, _ref1;
      if (this.index === this.length - 1 && this.children[this.index].is_end() && this.slide.config.cycle) {
        this.children[this.index].hide();
        this.set_index(0);
        return this.children[this.index].show();
      } else if ((0 <= (_ref = this.index) && _ref < this.length) && this.children[this.index].is_end()) {
        this.children[this.index].hide();
        this.set_index(this.index + 1);
        return this.children[this.index].next();
      } else if ((0 <= (_ref1 = this.index) && _ref1 < this.length)) {
        return this.children[this.index].next();
      }
    };

    Show.prototype.previous_fragment = function() {
      var _ref, _ref1;
      if (this.index === 0 && this.children[this.index].is_first() && this.slide.config.cycle) {
        this.children[this.index].hide();
        this.set_index(this.length - 1);
        return this.children[this.index].show();
      } else if ((0 <= (_ref = this.index) && _ref < this.length) && this.children[this.index].is_first()) {
        this.children[this.index].hide();
        this.set_index(this.index - 1);
        return this.children[this.index].show();
      } else if ((0 <= (_ref1 = this.index) && _ref1 < this.length)) {
        return this.children[this.index].previous();
      }
    };

    return Show;

  })();

  Page = (function() {
    function Page() {
      this.node = document.createElement('div');
      this.node.className = 'page';
      this.children = [];
      this.index = -1;
      this.total_count = 0;
    }

    Page.prototype.add = function(fragment) {
      if (fragment) {
        this.children.push(fragment);
        this.node.appendChild(fragment.node);
        this.index = 0;
        return this.total_count = this.children.length;
      }
    };

    Page.prototype.is_end = function() {
      return this.index === this.total_count;
    };

    Page.prototype.is_first = function() {
      return this.index === 1;
    };

    Page.prototype.next = function() {
      var index;
      index = this.index + 1;
      if ((1 <= index && index <= this.total_count)) {
        this.children[index - 1].show();
        return this.index = index;
      }
    };

    Page.prototype.previous = function() {
      var _ref;
      if ((1 <= (_ref = this.index) && _ref <= this.total_count)) {
        this.children[this.index - 1].hide();
        return this.index = this.index - 1;
      }
    };

    Page.prototype.show = function() {
      var i, _i, _ref;
      for (i = _i = 1, _ref = this.total_count; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        this.children[i - 1].show();
      }
      return this.index = this.total_count;
    };

    Page.prototype.hide = function() {
      var i, _i, _ref;
      for (i = _i = 1, _ref = this.total_count; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        this.children[i - 1].hide();
      }
      if (this.total_count > 0) {
        return this.index = 0;
      }
    };

    return Page;

  })();

  Fragment = (function() {
    function Fragment() {
      this.node = document.createElement('div');
      this.node.className = 'fragment';
      this.hide();
    }

    Fragment.prototype.add = function(text) {
      if (text) {
        return this.node.appendChild(text);
      }
    };

    Fragment.prototype.show = function() {
      return this.node.style.display = '';
    };

    Fragment.prototype.hide = function() {
      return this.node.style.display = 'none';
    };

    return Fragment;

  })();

  Control = (function() {
    function Control(slide) {
      this.slide = slide;
      this.node = document.createElement('div');
      this.node.className = 'control';
      this.previous_page = new PreviousPageButton(this.slide, this);
      this.previous_fragment = new PreviousFragmentButton(this.slide, this);
      this.next_fragment = new NextFragmentButton(this.slide, this);
      this.next_page = new NextPageButton(this.slide, this);
      this.full_screen = new FullScreenButton(this.slide, this);
      this.page_info = new PageInfo(this.slide, this);
      this.slide.node.appendChild(this.node);
    }

    return Control;

  })();

  Button = (function() {
    function Button(slide, parent) {
      var _button;
      this.slide = slide;
      this.parent = parent;
      this.show = this.slide.show;
      this.node = document.createElement('div');
      _button = this;
      if (this.mouse_down) {
        if (document.addEventListener) {
          this.node.addEventListener('mousedown', function(event) {
            return _button.mouse_down(_button, event);
          });
        } else {
          this.node.attachEvent('onmousedown', function(event) {
            return _button.mouse_down(_button, event);
          });
        }
      }
      if (this.key_up) {
        if (document.addEventListener) {
          document.addEventListener('keyup', function(event) {
            return _button.key_up(_button, event);
          });
        } else {
          document.attachEvent('onkeyup', function(event) {
            return _button.key_up(_button, event);
          });
        }
      }
      this.parent.node.appendChild(this.node);
      if (this.init) {
        this.init();
      }
    }

    Button.prototype.mouse_down = function(button, event) {
      return button.run(button, event);
    };

    Button.prototype.key_up = function(button, event) {
      if (button.keyCode && event.keyCode === button.keyCode) {
        return button.run(button, event);
      }
    };

    return Button;

  })();

  PreviousPageButton = (function(_super) {
    __extends(PreviousPageButton, _super);

    function PreviousPageButton() {
      _ref = PreviousPageButton.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PreviousPageButton.prototype.init = function() {
      this.node.className = 'control-action previous-page-action';
      this.node.innerHTML = '《';
      this.node.setAttribute('title', '上一页');
      return this.keyCode = 37;
    };

    PreviousPageButton.prototype.visible = function() {
      return this.slide.length > 0;
    };

    PreviousPageButton.prototype.enable = function() {
      return this.slide.cycle || this.slide.index !== 1;
    };

    PreviousPageButton.prototype.run = function(button, event) {
      return button.slide.show.previous_page();
    };

    return PreviousPageButton;

  })(Button);

  PreviousFragmentButton = (function(_super) {
    __extends(PreviousFragmentButton, _super);

    function PreviousFragmentButton() {
      _ref1 = PreviousFragmentButton.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    PreviousFragmentButton.prototype.init = function() {
      this.node.className = 'control-action previous-fragment-action';
      this.node.innerHTML = '&lt;';
      this.node.setAttribute('title', '上一段');
      return this.keyCode = 38;
    };

    PreviousFragmentButton.prototype.run = function(button, event) {
      return button.slide.show.previous_fragment();
    };

    return PreviousFragmentButton;

  })(Button);

  NextFragmentButton = (function(_super) {
    __extends(NextFragmentButton, _super);

    function NextFragmentButton() {
      _ref2 = NextFragmentButton.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    NextFragmentButton.prototype.init = function() {
      this.node.className = 'control-action next-fragment-action';
      this.node.innerHTML = '&gt;';
      this.node.setAttribute('title', '下一段');
      return this.keyCode = 40;
    };

    NextFragmentButton.prototype.run = function(button, event) {
      return button.slide.show.next_fragment();
    };

    return NextFragmentButton;

  })(Button);

  NextPageButton = (function(_super) {
    __extends(NextPageButton, _super);

    function NextPageButton() {
      _ref3 = NextPageButton.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    NextPageButton.prototype.init = function() {
      this.node.className = 'control-action next-page-action';
      this.node.innerHTML = '》';
      this.node.setAttribute('title', '下一页');
      return this.keyCode = 39;
    };

    NextPageButton.prototype.visible = function(slide) {
      return slide.length > 0;
    };

    NextPageButton.prototype.enable = function(slide) {
      return slide.config.cycle || slide.index !== slide.length;
    };

    NextPageButton.prototype.run = function(button, event) {
      return button.slide.show.next_page();
    };

    return NextPageButton;

  })(Button);

  FullScreenButton = (function(_super) {
    __extends(FullScreenButton, _super);

    function FullScreenButton() {
      _ref4 = FullScreenButton.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    FullScreenButton.prototype.init = function() {
      var listener_name, _i, _len, _ref5, _results;
      this.node.className = 'control-action full-screen-action';
      this.node.innerHTML = '□';
      this.node.setAttribute('title', '全屏');
      if (document.addEventListener) {
        _ref5 = ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange'];
        _results = [];
        for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
          listener_name = _ref5[_i];
          _results.push(document.addEventListener(listener_name, function(event) {
            if (document.webkitCurrentFullScreenElement) {
              return slide.parent.classList.add('full-screen');
            } else {
              return slide.parent.classList.remove('full-screen');
            }
          }));
        }
        return _results;
      }
    };

    FullScreenButton.prototype.run = function(button, event) {
      var request;
      if (document.webkitCurrentFullScreenElement) {
        request = document.cancelFullScreen || document.webkitCancelFullScreen || document.mozCancelFullScreen || document.exitFullscreen;
        if (request) {
          return request.call(document);
        }
      } else {
        request = slide.parent.requestFullScreen || slide.parent.mozRequestFullScreen || slide.parent.webkitRequestFullScreen || slide.parent.msRequestFullScreen;
        if (request) {
          return request.call(slide.parent);
        }
      }
    };

    return FullScreenButton;

  })(Button);

  PageInfo = (function() {
    function PageInfo(slide, parent) {
      this.slide = slide;
      this.parent = parent;
      this.node = document.createElement('div');
      this.node.className = 'page-info';
      this.current_page_node = document.createElement('span');
      this.current_page_node.className = 'current-page';
      this.current_page_node.innerHTML = this.slide.index;
      this.node.appendChild(this.current_page_node);
      this.delimiter_node = document.createElement('span');
      this.delimiter_node.className = 'delimiter';
      this.delimiter_node.innerHTML = '/';
      this.node.appendChild(this.delimiter_node);
      this.total_page_node = document.createElement('span');
      this.total_page_node.className = 'total_page';
      this.total_page_node.innerHTML = this.slide.show.length;
      this.node.appendChild(this.total_page_node);
      this.parent.node.appendChild(this.node);
    }

    PageInfo.prototype.update_status = function() {
      return this.current_page_node.innerHTML = this.slide.show.index + 1;
    };

    return PageInfo;

  })();

  ProgressBar = (function() {
    function ProgressBar(slide) {
      this.slide = slide;
      this.node = document.createElement('div');
      this.node.className = 'progress-bar';
      this.outer_node = document.createElement('div');
      this.outer_node.className = 'progress-outer';
      this.node.appendChild(this.outer_node);
      this.inner_node = document.createElement('div');
      this.inner_node.className = 'progress-inner';
      this.outer_node.appendChild(this.inner_node);
      this.slide.node.appendChild(this.node);
    }

    ProgressBar.prototype.update_status = function() {
      if (this.slide.show.length !== -1) {
        return this.inner_node.style.width = "" + ((this.slide.show.index + 1) / this.slide.show.length * 100) + "%";
      }
    };

    return ProgressBar;

  })();

  window.onload = function() {
    return new Slide({
      id: 'content',
      cycle: true
    });
  };

}).call(this);
