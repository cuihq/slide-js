// Generated by CoffeeScript 1.6.3
(function() {
  var ACTIONS, Action, Fragment, Page, Slide, config;

  ACTIONS = [
    {
      cls: 'previous-page-action',
      val: '《',
      key: 37,
      title: '上一页',
      run: function(slide) {
        var _ref;
        if ((1 < (_ref = slide.current_number) && _ref <= slide.length)) {
          slide.children[slide.current_number - 1].hide();
          slide.set_current_number(slide.current_number - 1);
          return slide.children[slide.current_number - 1].show();
        } else if (slide.current_number === 1 && config.cycle) {
          slide.children[slide.current_number - 1].hide();
          slide.current_number = slide.length;
          return slide.children[slide.current_number - 1].show();
        }
      }
    }, {
      cls: 'previous-fragment-action',
      val: '&lt;',
      key: 38,
      title: '上一段',
      run: function(slide) {
        var _ref, _ref1;
        if (slide.current_number === 1 && slide.children[slide.current_number - 1].is_first() && config.cycle) {
          slide.children[slide.current_number - 1].hide();
          slide.set_current_number(slide.length);
          return slide.children[slide.current_number - 1].show();
        } else if ((1 < (_ref = slide.current_number) && _ref <= slide.length) && slide.children[slide.current_number - 1].is_first()) {
          slide.children[slide.current_number - 1].hide();
          slide.set_current_number(slide.current_number - 1);
          return slide.children[slide.current_number - 1].show();
        } else if ((1 <= (_ref1 = slide.current_number) && _ref1 <= slide.length)) {
          return slide.children[slide.current_number - 1].previous();
        }
      }
    }, {
      cls: 'next-fragment-action',
      val: '&gt;',
      key: 40,
      title: '下一段',
      run: function(slide) {
        var _ref, _ref1;
        if (slide.current_number === slide.length && slide.children[slide.current_number - 1].is_end() && config.cycle) {
          slide.children[slide.current_number - 1].hide();
          slide.set_current_number(1);
          return slide.children[slide.current_number - 1].show();
        } else if ((1 <= (_ref = slide.current_number) && _ref < slide.length) && slide.children[slide.current_number - 1].is_end()) {
          slide.children[slide.current_number - 1].hide();
          slide.set_current_number(slide.current_number + 1);
          return slide.children[slide.current_number - 1].next();
        } else if ((1 <= (_ref1 = slide.current_number) && _ref1 <= slide.length)) {
          return slide.children[slide.current_number - 1].next();
        }
      }
    }, {
      cls: 'next-page-action',
      val: '》',
      key: 39,
      title: '下一页',
      run: function(slide) {
        var _ref;
        if ((1 <= (_ref = slide.current_number) && _ref < slide.length)) {
          if (slide.children[slide.current_number - 1].is_end()) {
            slide.children[slide.current_number - 1].hide();
            slide.set_current_number(slide.current_number + 1);
            return slide.children[slide.current_number - 1].show();
          } else {
            return slide.children[slide.current_number - 1].show();
          }
        } else if (slide.current_number === slide.length && config.cycle) {
          if (slide.children[slide.current_number - 1].is_end()) {
            slide.children[slide.current_number - 1].hide();
            slide.set_current_number(1);
            return slide.children[slide.current_number - 1].show();
          } else {
            return slide.children[slide.current_number - 1].show();
          }
        }
      }
    }, {
      cls: 'full-screen-action',
      val: '□',
      key: 122,
      title: '全屏',
      init: function(slide) {
        if (document.addEventListener) {
          document.addEventListener('fullscreenchange', function(event) {
            if (document.webkitCurrentFullScreenElement) {
              return slide.parent.classList.add('full-screen');
            } else {
              return slide.parent.classList.remove('full-screen');
            }
          });
          document.addEventListener('webkitfullscreenchange', function(event) {
            if (document.webkitCurrentFullScreenElement) {
              return slide.parent.classList.add('full-screen');
            } else {
              return slide.parent.classList.remove('full-screen');
            }
          });
          return document.addEventListener('mozfullscreenchange', function(event) {
            if (document.webkitCurrentFullScreenElement) {
              return slide.parent.classList.add('full-screen');
            } else {
              return slide.parent.classList.remove('full-screen');
            }
          });
        }
      },
      run: function(slide) {
        var request;
        if (document.webkitCurrentFullScreenElement) {
          request = document.cancelFullScreen || document.webkitCancelFullScreen || document.mozCancelFullScreen || document.exitFullscreen;
          if (request) {
            return request.call(document);
          }
        } else {
          request = slide.parent.requestFullScreen || slide.parent.mozRequestFullScreen || slide.parent.webkitRequestFullScreen || slide.parent.msRequestFullScreen;
          if (request) {
            return request.call(slide.parent);
          }
        }
      }
    }
  ];

  Action = (function() {
    function Action(parent, slide, config) {
      var node;
      node = document.createElement('button');
      node.className = 'control-action ' + config.cls;
      if (config.val) {
        node.innerHTML = config.val;
      }
      if (config.title) {
        node.setAttribute('title', config.title);
      }
      node.onclick = function() {
        return config.run(slide);
      };
      if (document.addEventListener) {
        document.addEventListener('keyup', function(event) {
          if (config.key === event.keyCode) {
            return config.run(slide);
          }
        });
      } else {
        document.attachEvent('onkeyup', function(event) {
          if (config.key === event.keyCode) {
            return config.run(slide);
          }
        });
      }
      parent.appendChild(node);
      if (config.init) {
        config.init(slide);
      }
    }

    return Action;

  })();

  Slide = (function() {
    function Slide(config) {
      var action, child, fragment, page, _i, _j, _len, _len1, _ref;
      this.config = config;
      this.parent = document.getElementById(this.config.id);
      this.title_node = document.createElement('div');
      this.title_node.className = 'slide-title';
      this.title_node.innerHTML = this.config.title || 'slide';
      this.slide_node = document.createElement('div');
      this.slide_node.className = 'slide';
      this.children = [];
      this.current_number = -1;
      this.length = 0;
      _ref = this.parent.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child) {
          if (!page) {
            page = new Page;
          }
          if (child.tagName === 'hr'.toUpperCase()) {
            this.add(page);
            page = new Page;
          } else {
            fragment = new Fragment(page);
            fragment.add(child.cloneNode(true));
            page.add(fragment);
          }
          child.style.display = 'none';
        }
      }
      this.add(page);
      this.parent.appendChild(this.title_node);
      this.parent.appendChild(this.slide_node);
      this.control_node = document.createElement('div');
      this.control_node.className = 'control';
      for (_j = 0, _len1 = ACTIONS.length; _j < _len1; _j++) {
        action = ACTIONS[_j];
        new Action(this.control_node, this, action);
      }
      this.progress_bar_node = document.createElement('div');
      this.progress_bar_node.className = 'progress-bar';
      this.progress_outer_node = document.createElement('div');
      this.progress_outer_node.className = 'progress-outer';
      this.progress_bar_node.appendChild(this.progress_outer_node);
      this.progress_inner = document.createElement('div');
      this.progress_inner.className = 'progress-inner';
      this.progress_outer_node.appendChild(this.progress_inner);
      this.parent.appendChild(this.progress_bar_node);
      this.page_info_node = document.createElement('div');
      this.page_info_node.className = 'page-info';
      this.current_page_node = document.createElement('span');
      this.current_page_node.className = 'current-page';
      this.current_page_node.innerHTML = this.current_number;
      this.page_info_node.appendChild(this.current_page_node);
      this.delimiter = document.createElement('span');
      this.delimiter.className = 'delimiter';
      this.delimiter.innerHTML = '/';
      this.page_info_node.appendChild(this.delimiter);
      this.total_page = document.createElement('span');
      this.total_page.className = 'total_page';
      this.total_page.innerHTML = this.length;
      this.page_info_node.appendChild(this.total_page);
      this.control_node.appendChild(this.page_info_node);
      this.parent.appendChild(this.control_node);
      if (this.length !== 0) {
        this.set_current_number(1);
      }
      if (this.length > 0) {
        this.children[0].show();
      }
    }

    Slide.prototype.add = function(page) {
      if (page) {
        this.children.push(page);
        this.slide_node.appendChild(page.node);
        this.current_number = 1;
        return this.length = this.children.length;
      }
    };

    Slide.prototype.set_current_number = function(value) {
      this.current_number = value;
      this.current_page_node.innerHTML = value;
      if (this.length !== 0) {
        return this.progress_inner.style.width = "" + (this.current_number / this.length * 100) + "%";
      }
    };

    return Slide;

  })();

  Page = (function() {
    function Page() {
      this.node = document.createElement('div');
      this.node.className = 'page';
      this.children = [];
      this.current_number = -1;
      this.total_count = 0;
    }

    Page.prototype.add = function(fragment) {
      if (fragment) {
        this.children.push(fragment);
        this.node.appendChild(fragment.node);
        this.current_number = 0;
        return this.total_count = this.children.length;
      }
    };

    Page.prototype.is_end = function() {
      return this.current_number === this.total_count;
    };

    Page.prototype.is_first = function() {
      return this.current_number === 1;
    };

    Page.prototype.next = function() {
      var index;
      index = this.current_number + 1;
      if ((1 <= index && index <= this.total_count)) {
        this.children[index - 1].show();
        return this.current_number = index;
      }
    };

    Page.prototype.previous = function() {
      var _ref;
      if ((1 <= (_ref = this.current_number) && _ref <= this.total_count)) {
        this.children[this.current_number - 1].hide();
        return this.current_number = this.current_number - 1;
      }
    };

    Page.prototype.show = function() {
      var i, _i, _ref;
      for (i = _i = 1, _ref = this.total_count; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        this.children[i - 1].show();
      }
      return this.current_number = this.total_count;
    };

    Page.prototype.hide = function() {
      var i, _i, _ref;
      for (i = _i = 1, _ref = this.total_count; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        this.children[i - 1].hide();
      }
      if (this.total_count > 0) {
        return this.current_number = 0;
      }
    };

    return Page;

  })();

  Fragment = (function() {
    function Fragment() {
      this.node = document.createElement('div');
      this.node.className = 'fragment';
      this.hide();
    }

    Fragment.prototype.add = function(text) {
      if (text) {
        return this.node.appendChild(text);
      }
    };

    Fragment.prototype.show = function() {
      return this.node.style.display = '';
    };

    Fragment.prototype.hide = function() {
      return this.node.style.display = 'none';
    };

    return Fragment;

  })();

  config = {
    id: 'content',
    cycle: true,
    title: '幻灯片Demo'
  };

  window.onload = function() {
    return new Slide(config);
  };

}).call(this);
