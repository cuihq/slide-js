// Generated by CoffeeScript 1.6.3
(function() {
  var Fragment, Page, Slide, config;

  config = {
    id: 'content',
    cycle: true
  };

  Slide = (function() {
    function Slide(parent) {
      this.parent = parent;
      this.node = document.createElement('div');
      this.node.className = 'slide';
      this.children = [];
      this.current_number = -1;
      this.total_count = 0;
    }

    Slide.prototype.add = function(page) {
      if (page) {
        this.children.push(page);
        this.node.appendChild(page.node);
        this.current_number = 1;
        return this.total_count = this.children.length;
      }
    };

    Slide.prototype.run = function() {
      var _slide;
      this.parent.appendChild(this.node);
      _slide = this;
      if (document.body.addEventListener) {
        window.addEventListener('keyup', function(event) {
          switch (event.keyCode) {
            case 39:
              return _slide.next_page();
            case 37:
              return _slide.previous_page();
            case 32:
            case 40:
              return _slide.next_fragment();
            case 38:
              return _slide.previous_fragment();
          }
        });
      } else {
        document.body.attachEvent('onkeyup', function(event) {
          switch (event.keyCode) {
            case 39:
              return _slide.next_page();
            case 37:
              return _slide.previous_page();
            case 32:
            case 40:
              return _slide.next_fragment();
            case 38:
              return _slide.previous_fragment();
          }
        });
      }
      if (this.total_count > 0) {
        return this.children[0].show();
      }
    };

    Slide.prototype.next_page = function() {
      var _ref;
      if ((1 <= (_ref = this.current_number) && _ref < this.total_count)) {
        if (this.children[this.current_number - 1].is_end()) {
          this.children[this.current_number - 1].hide();
          this.current_number += 1;
          return this.children[this.current_number - 1].show();
        } else {
          return this.children[this.current_number - 1].show();
        }
      } else if (this.current_number === this.total_count && config.cycle) {
        if (this.children[this.current_number - 1].is_end()) {
          this.children[this.current_number - 1].hide();
          this.current_number = 1;
          return this.children[this.current_number - 1].show();
        } else {
          return this.children[this.current_number - 1].show();
        }
      }
    };

    Slide.prototype.previous_page = function() {
      var _ref;
      if ((1 < (_ref = this.current_number) && _ref <= this.total_count)) {
        this.children[this.current_number - 1].hide();
        this.current_number -= 1;
        return this.children[this.current_number - 1].show();
      } else if (this.current_number === 1 && config.cycle) {
        this.children[this.current_number - 1].hide();
        this.current_number = this.total_count;
        return this.children[this.current_number - 1].show();
      }
    };

    Slide.prototype.next_fragment = function() {
      var _ref, _ref1;
      if (this.current_number === this.total_count && this.children[this.current_number - 1].is_end() && config.cycle) {
        this.children[this.current_number - 1].hide();
        this.current_number = 1;
        return this.children[this.current_number - 1].show();
      } else if ((1 <= (_ref = this.current_number) && _ref < this.total_count) && this.children[this.current_number - 1].is_end()) {
        this.children[this.current_number - 1].hide();
        this.current_number += 1;
        return this.children[this.current_number - 1].next();
      } else if ((1 <= (_ref1 = this.current_number) && _ref1 <= this.total_count)) {
        return this.children[this.current_number - 1].next();
      }
    };

    Slide.prototype.previous_fragment = function() {
      var _ref, _ref1;
      if (this.current_number === 1 && this.children[this.current_number - 1].is_first() && config.cycle) {
        this.children[this.current_number - 1].hide();
        this.current_number = this.total_count;
        return this.children[this.current_number - 1].show();
      } else if ((1 < (_ref = this.current_number) && _ref <= this.total_count) && this.children[this.current_number - 1].is_first()) {
        this.children[this.current_number - 1].hide();
        this.current_number -= 1;
        return this.children[this.current_number - 1].show();
      } else if ((1 <= (_ref1 = this.current_number) && _ref1 <= this.total_count)) {
        return this.children[this.current_number - 1].previous();
      }
    };

    return Slide;

  })();

  Page = (function() {
    function Page() {
      this.node = document.createElement('div');
      this.node.className = 'page';
      this.children = [];
      this.current_number = -1;
      this.total_count = 0;
    }

    Page.prototype.add = function(fragment) {
      if (fragment) {
        this.children.push(fragment);
        this.node.appendChild(fragment.node);
        this.current_number = 0;
        return this.total_count = this.children.length;
      }
    };

    Page.prototype.is_end = function() {
      return this.current_number === this.total_count;
    };

    Page.prototype.is_first = function() {
      return this.current_number === 1;
    };

    Page.prototype.next = function() {
      var index;
      index = this.current_number + 1;
      if ((1 <= index && index <= this.total_count)) {
        this.children[index - 1].show();
        return this.current_number = index;
      }
    };

    Page.prototype.previous = function() {
      var _ref;
      if ((1 <= (_ref = this.current_number) && _ref <= this.total_count)) {
        this.children[this.current_number - 1].hide();
        return this.current_number = this.current_number - 1;
      }
    };

    Page.prototype.show = function() {
      var i, _i, _ref;
      for (i = _i = 1, _ref = this.total_count; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        this.children[i - 1].show();
      }
      return this.current_number = this.total_count;
    };

    Page.prototype.hide = function() {
      var i, _i, _ref;
      for (i = _i = 1, _ref = this.total_count; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        this.children[i - 1].hide();
      }
      if (this.total_count > 0) {
        return this.current_number = 0;
      }
    };

    return Page;

  })();

  Fragment = (function() {
    function Fragment() {
      this.node = document.createElement('div');
      this.node.className = 'fragment';
      this.hide();
    }

    Fragment.prototype.add = function(text) {
      if (text) {
        return this.node.appendChild(text);
      }
    };

    Fragment.prototype.show = function() {
      return this.node.style.display = '';
    };

    Fragment.prototype.hide = function() {
      return this.node.style.display = 'none';
    };

    return Fragment;

  })();

  window.onload = function() {
    var child, content, fragment, page, slide, _i, _len, _ref;
    content = document.getElementById(config.id);
    slide = new Slide(content);
    _ref = content.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      if (child) {
        if (!page) {
          page = new Page;
        }
        if (child.tagName === 'hr'.toUpperCase()) {
          slide.add(page);
          page = new Page;
        } else {
          fragment = new Fragment(page);
          fragment.add(child.cloneNode(true));
          page.add(fragment);
        }
        child.style.display = 'none';
      }
    }
    slide.add(page);
    return slide.run();
  };

}).call(this);
